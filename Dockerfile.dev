# syntax=docker/dockerfile:1

ARG NODE_VERSION=18.17.0

################################################################################
# Use node image for base image for all stages.
FROM node:${NODE_VERSION}-alpine AS base

# Set working directory for all build stages.
WORKDIR /usr/src/app

################################################################################
# Create a stage for installing production dependencies.
FROM base AS deps

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /root/.yarn to speed up subsequent builds.
# Leverage bind mounts to package.json and yarn.lock, ensuring yarn.lock is read-write.
RUN --mount=type=bind,source=package.json,target=package.json,readonly \
    --mount=type=bind,source=yarn.lock,target=yarn.lock,rw \
    --mount=type=cache,target=/root/.yarn \
    yarn install --production --frozen-lockfile

################################################################################
# Create a stage for building the application.
FROM deps AS build

# Download additional development dependencies before building.
RUN --mount=type=bind,source=package.json,target=package.json,readonly \
    --mount=type=bind,source=yarn.lock,target=yarn.lock,rw \
    --mount=type=cache,target=/root/.yarn \
    yarn install --frozen-lockfile

# Copy the rest of the source files into the image.
COPY . .

COPY env.dev .env

# Run the build script.
RUN yarn run build

################################################################################
# Create a new stage to run the application with minimal runtime dependencies
FROM base AS final

# Use production node environment by default.
ENV NODE_ENV=production

# Run the application as a non-root user.
USER node

# Copy package.json so that package manager commands can be used.
COPY package.json .

# Copy the production dependencies from the deps stage and also
# the built application from the build stage into the image.
COPY --from=deps /usr/src/app/node_modules ./node_modules
COPY --from=build /usr/src/app/public ./public
COPY --from=build /usr/src/app/.next ./.next

# Expose the port that the application listens on.
EXPOSE 3000

# Run the application using the JSON format to prevent unintended behavior.
CMD ["yarn", "start"]
